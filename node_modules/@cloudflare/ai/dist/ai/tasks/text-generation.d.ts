import { Tensor } from "../tensor";
import { AiTask } from "../ai";
export type RoleScopedChatInput = {
    role: string;
    content: string;
};
export type AiTextGenerationInput = {
    prompt?: string;
    raw?: boolean;
    stream?: boolean;
    max_tokens?: number;
    messages?: RoleScopedChatInput[];
};
export type AiTextGenerationOutput = {
    response?: string;
} | ReadableStream;
export declare class AiTextGeneration implements AiTask {
    private modelSettings;
    inputs: AiTextGenerationInput;
    preProcessedInputs: any;
    postProcessedOutputs: AiTextGenerationOutput | ReadableStream;
    tensors: Array<Tensor<any>>;
    schema: {
        input: {
            type: string;
            oneOf: ({
                properties: {
                    prompt: {
                        type: string;
                        maxLength: number;
                    };
                    raw: {
                        type: string;
                        default: boolean;
                    };
                    stream: {
                        type: string;
                        default: boolean;
                    };
                    max_tokens: {
                        type: string;
                        default: number;
                    };
                    messages?: undefined;
                };
                required: string[];
            } | {
                properties: {
                    messages: {
                        type: string;
                        items: {
                            type: string;
                            properties: {
                                role: {
                                    type: string;
                                };
                                content: {
                                    type: string;
                                    maxLength: number;
                                };
                            };
                            required: string[];
                        };
                    };
                    stream: {
                        type: string;
                        default: boolean;
                    };
                    max_tokens: {
                        type: string;
                        default: number;
                    };
                    prompt?: undefined;
                    raw?: undefined;
                };
                required: string[];
            })[];
        };
        output: {
            oneOf: ({
                type: string;
                contentType: string;
                properties: {
                    response: {
                        type: string;
                    };
                };
                format?: undefined;
            } | {
                type: string;
                contentType: string;
                format: string;
                properties?: undefined;
            })[];
        };
    };
    constructor(inputs: AiTextGenerationInput, modelSettings: any);
    preProcessing(): void;
    generateTensors(preProcessedInputs: any): any;
    postProcessing(response: any): void;
    postProcessingStream(response: any, inclen: any): {
        response: any;
    };
}
//# sourceMappingURL=text-generation.d.ts.map