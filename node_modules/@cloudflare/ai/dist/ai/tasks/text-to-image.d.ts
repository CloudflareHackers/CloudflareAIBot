import { Tensor } from "../tensor";
import { AiTask } from "../ai";
export type AiTextToImageInput = {
    prompt: string;
    image?: number[];
    mask?: number[];
    num_steps?: number;
    strength?: number;
    guidance?: number;
};
export type AiTextToImageOutput = Uint8Array;
export declare class AiTextToImage implements AiTask {
    private modelSettings;
    inputs: AiTextToImageInput;
    preProcessedInputs: any;
    postProcessedOutputs: AiTextToImageOutput;
    tensors: Array<Tensor<any>>;
    schema: {
        input: {
            type: string;
            properties: {
                prompt: {
                    type: string;
                };
                image: {
                    type: string;
                    items: {
                        type: string;
                    };
                };
                mask: {
                    type: string;
                    items: {
                        type: string;
                    };
                };
                num_steps: {
                    type: string;
                    default: number;
                    maximum: number;
                };
                strength: {
                    type: string;
                    default: number;
                };
                guidance: {
                    type: string;
                    default: number;
                };
            };
            required: string[];
        };
        output: {
            type: string;
            contentType: string;
            format: string;
        };
    };
    constructor(inputs: AiTextToImageInput, modelSettings: any);
    preProcessing(): void;
    generateTensors(preProcessedInputs: any): any;
    OldgenerateTensors(preProcessedInputs: any): any;
    postProcessing(response: any): void;
}
//# sourceMappingURL=text-to-image.d.ts.map