import { Tensor } from "../tensor";
import { AiTask } from "../ai";
export type AiTextEmbeddingsInput = {
    text: string | string[];
};
export type AiTextEmbeddingsOutput = {
    shape: number[];
    data: number[][];
};
export declare class AiTextEmbeddings implements AiTask {
    private modelSettings;
    inputs: AiTextEmbeddingsInput;
    preProcessedInputs: any;
    postProcessedOutputs: AiTextEmbeddingsOutput;
    tensors: Array<Tensor<any>>;
    schema: {
        input: {
            type: string;
            properties: {
                text: {
                    oneOf: ({
                        type: string;
                        items?: undefined;
                        maxItems?: undefined;
                    } | {
                        type: string;
                        items: {
                            type: string;
                        };
                        maxItems: number;
                    })[];
                };
            };
            required: string[];
        };
        output: {
            type: string;
            contentType: string;
            properties: {
                shape: {
                    type: string;
                    items: {
                        type: string;
                    };
                };
                data: {
                    type: string;
                    items: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                };
            };
        };
    };
    constructor(inputs: AiTextEmbeddingsInput, modelSettings: any);
    preProcessing(): void;
    generateTensors(preProcessedInputs: any): any;
    postProcessing(response: any): void;
}
//# sourceMappingURL=text-embeddings.d.ts.map