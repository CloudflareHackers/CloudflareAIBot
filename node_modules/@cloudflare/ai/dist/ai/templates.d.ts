export declare enum templateFlags {
    NONE = 0,
    CARRY_SYSTEM_INST = 1,
    ABSORB_ROLE = 2,
    APPEND_LAST_SYSTEM = 3
}
export declare const tgTemplates: {
    bare: {
        system: {
            flag: templateFlags;
        };
        user: {
            flag: templateFlags;
        };
        assistant: {
            pre: string;
            post: string;
        };
    };
    sqlcoder: {
        system: {
            flag: templateFlags;
        };
        user: {
            flag: templateFlags;
        };
        assistant: {
            flag: templateFlags;
        };
        global: {
            template: string;
        };
    };
    inst: {
        system: {
            flag: templateFlags;
        };
        user: {
            pre: string;
            post: string;
            flag: templateFlags;
        };
        assistant: {
            pre: string;
            post: string;
        };
    };
    llama2: {
        system: {
            pre: string;
            post: string;
        };
        user: {
            pre: string;
            post: string;
            flag: templateFlags;
        };
        assistant: {
            pre: string;
            post: string;
        };
    };
    deepseek: {
        system: {
            post: string;
        };
        user: {
            pre: string;
            post: string;
        };
        assistant: {
            pre: string;
            post: string;
        };
        global: {
            post: string;
        };
    };
    falcon: {
        system: {
            post: string;
        };
        user: {
            pre: string;
            post: string;
        };
        assistant: {
            pre: string;
            post: string;
        };
        global: {
            post: string;
        };
    };
    openchat: {
        system: {
            flag: templateFlags;
        };
        user: {
            pre: string;
            post: string;
            flag: templateFlags;
        };
        assistant: {
            pre: string;
            post: string;
        };
        global: {
            post: string;
        };
    };
    "openchat-alt": {
        system: {
            flag: templateFlags;
        };
        user: {
            pre: string;
            post: string;
            flag: templateFlags;
        };
        assistant: {
            pre: string;
            post: string;
        };
        global: {
            post: string;
        };
    };
    tinyllama: {
        system: {
            pre: string;
            post: string;
        };
        user: {
            pre: string;
            post: string;
        };
        assistant: {
            pre: string;
            post: string;
        };
        global: {
            post: string;
        };
    };
    chatml: {
        system: {
            pre: string;
            post: string;
        };
        user: {
            pre: string;
            post: string;
        };
        assistant: {
            pre: string;
            post: string;
        };
        global: {
            post: string;
        };
    };
    "orca-hashes": {
        system: {
            pre: string;
            post: string;
        };
        user: {
            pre: string;
            post: string;
        };
        assistant: {
            pre: string;
            post: string;
        };
        global: {
            post: string;
        };
    };
    "codellama-instruct": {
        system: {
            pre: string;
            post: string;
        };
        user: {
            pre: string;
            post: string;
            flag: templateFlags;
        };
        assistant: {
            post: string;
        };
    };
    "mistral-instruct": {
        system: {
            pre: string;
            post: string;
        };
        user: {
            pre: string;
            post: string;
            flag: templateFlags;
        };
        assistant: {
            pre: string;
            post: string;
        };
    };
    zephyr: {
        system: {
            pre: string;
            post: string;
        };
        user: {
            pre: string;
            post: string;
        };
        assistant: {
            pre: string;
            post: string;
        };
        global: {
            post: string;
        };
    };
};
export declare const generateTgTemplate: (messages: any, template: string) => string;
export declare const applyTag: (template: string, role: string, type: string, state: any) => any;
export declare const applyRole: (template: string, role: string, content: string, state: any) => any;
//# sourceMappingURL=templates.d.ts.map